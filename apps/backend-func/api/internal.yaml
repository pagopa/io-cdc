openapi: 3.0.1
info:
  version: 1.1.0
  title: CdC Backend API
  x-logo:
    url: https://io.italia.it/assets/img/io-logo-blue.svg
  description: |
    These APIs serve the microfrontend related to Carta della Cultura
servers:
  - url: /api/v1
tags:
  - name: utils
    description: these endpoints are related to utility functions
  - name: access
    description: these endpoints are related to access control
  - name: registration
    description: these endpoints are related to the registration process of the cdc
  - name: usage
    description: these endpoints are related to the usage of the cdc
security:
  - ApiKeyAuth: []
paths:
  /info:
    get:
      tags:
        - utils
      operationId: info
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationInfo"
        "500":
          description: Internal Server error
  /fauth:
    get:
      tags:
        - access
      operationId: fimsAuth
      parameters:
        - in: query
          name: device
          required: false
          schema:
            type: string
      responses:
        "302":
          description: Redirect to openid provider
        "500":
          description: Internal Server error
  /fcb:
    get:
      tags:
        - access
      operationId: fimsCallback
      parameters:
        - in: query
          name: state
          required: true
          schema:
            type: string
        - in: query
          name: code
          required: true
          schema:
            type: string
        - in: query
          name: iss
          schema:
            type: string
        - in: header
          name: signature
          schema:
            type: string
        - in: header
          name: signature-input
          schema:
            type: string
      responses:
        "302":
          description: Redirect to RP Authorize
        "401":
          description: Unauthorized
        "500":
          description: Internal Server error
  /authorize:
    get:
      tags:
        - access
      operationId: authorize
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Session Token successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionToken"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server error
  /years:
    get:
      tags:
        - registration
      operationId: getYears
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Years"
        "500":
          description: Internal Server error
  /card-requests:
    get:
      tags:
        - registration
      operationId: getCardRequests
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardRequests"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server error
    post:
      tags:
        - registration
      operationId: insertCardRequest
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
      requestBody:
        description: Years to request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/YearsToRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardRequests"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server error
  /cards:
    get:
      tags:
        - usage
      summary: Get the list of Carta della Cultura cards
      operationId: getCardsList
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardsList"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
  /vouchers:
    get:
      tags:
        - usage
      summary: Get the list of vouchers for the Carta della Cultura
      operationId: getVouchersList
      parameters:
        - name: year
          in: query
          required: false
          schema:
            type: string
          description: The year of the Carta della Cultura card to filter vouchers
      responses:
        "200":
          description: Successful response with a list of vouchers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VoucherDetails"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
    post:
      tags:
        - usage
      summary: Generate a voucher for the Carta della Cultura
      operationId: generateVoucher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoucherRequest"
      responses:
        "200":
          description: Voucher generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoucherDetails"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
  /vouchers/{id}:
    get:
      tags:
        - usage
      summary: Get details of a specific voucher
      operationId: getVoucherDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the voucher
      responses:
        "200":
          description: Successful response with voucher details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoucherDetails"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
    delete:
      tags:
        - usage
      summary: Delete a voucher for the Carta della Cultura
      operationId: deleteVoucher
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the voucher to be deleted
      responses:
        "204":
          description: Voucher deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Functions-Key
  schemas:
    YearsToRequest:
      type: array
      items:
        type: string
    InternalServerError:
      description: InternalServerError
      allOf:
        - $ref: "#/components/schemas/ProblemJson"
        - type: object
          properties:
            status:
              type: integer
              enum:
                - 500
              example: 500
              description: >-
                The HTTP status code generated by the origin server for this
                occurrence of the problem.
          required:
            - status
    BadRequest:
      description: Bad Request
      allOf:
        - $ref: "#/components/schemas/ProblemJson"
        - type: object
          properties:
            status:
              type: integer
              enum:
                - 400
              example: 400
              description: >-
                The HTTP status code generated by the origin server for this
                occurrence of the problem.
          required:
            - status
    Unauthorized:
      description: Unauthorized
      allOf:
        - $ref: "#/components/schemas/ProblemJson"
        - type: object
          properties:
            status:
              type: integer
              enum:
                - 401
              example: 401
              description: >-
                The HTTP status code generated by the origin server for this
                occurrence of the problem.
          required:
            - status
    ApplicationInfo:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
      required:
        - name
        - version
    SessionToken:
      type: object
      properties:
        token:
          type: string
        route:
          type: string
          enum: ["REGISTRATION", "USAGE"]
      required:
        - token
    Years:
      type: array
      items:
        type: string
    CardRequests:
      type: array
      items:
        $ref: "#/components/schemas/CardRequest"
    CardRequest:
      type: object
      properties:
        year:
          type: string
      required:
        - year
    CardsList:
      type: array
      items:
        $ref: "#/components/schemas/Card"
    Card:
      type: object
      properties:
        card_name:
          type: string
          description: Name of the Carta della Cultura card
          example: "Cultura Card 2023"
        year:
          type: string
          description: Year of the card
          example: "2023"
        card_status:
          type: string
          description: Status of the card (e.g., active, expired)
          enum: ["ACTIVE", "EXPIRED", "REVOKED"]
          example: "ACTIVE"
        expiration_date:
          type: string
          format: date-time
          description: Expiration date of the card
          example: "2026-12-31T23:59:59Z"
        residual_amount:
          type: number
          format: float
          description: Remaining balance on the card
          example: 50.01
      required:
        - card_name
        - year
        - card_status
        - expiration_date
        - residual_amount
    VoucherRequest:
      type: object
      properties:
        year:
          type: string
          description: The ID of the Carta della Cultura card
          example: "2023"
        amount:
          type: number
          format: float
          description: The amount to be loaded onto the voucher
          example: 20.00
      required:
        - year
        - amount
    VoucherDetails:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the generated voucher
          example: "1234-5678-90"
        amount:
          type: number
          format: float
          description: Amount loaded onto the voucher
          example: 20.00
        expiration_date:
          type: string
          format: date-time
          description: Expiration date of the voucher
          example: "2026-12-31T23:59:59Z"
        voucher_status:
          type: string
          description: Status of the voucher (e.g., active, used, expired)
          enum: ["PENDING", "USED", "EXPIRED", "REFUNDED"]
          example: "PENDING"
        card_year:
          type: string
          description: The year of the Carta della Cultura card associated with the voucher
          example: "2023"
        applicant:
          type: string
          description: The applicant who generated the voucher
          example: "SELF"
          enum: ["SELF", "FAMILY_MEMBER"]
        merchant:
          type: string
          description: The merchant where the voucher was used
          example: "Cultural Store"
        spending_date:
          type: string
          format: date-time
          description: Date when the voucher was spent
          example: "2026-12-31T23:59:59Z"
        refund:
          type: object
          properties:
            amount:
              type: number
              format: float
              description: Amount refunded for the voucher
              example: 5.00
            refund_status:
              type: string
              description: Status of the refund (e.g., pending, completed)
              enum: ["PENDING", "COMPLETED", "FAILED"]
              example: "COMPLETED"
          required:
            - amount
            - refund_status
      required:
        - id
        - amount
        - expiration_date
        - voucher_status
        - card_year
        - applicant
    ProblemJson:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: about:blank
          example: https://example.com/problem/constraint-violation
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in english and
            readable

            for engineers (usually not suited for non technical stakeholders and

            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 200
        detail:
          type: string
          description: |-
            A human readable explanation specific to this occurrence of the
            problem.
          example: There was an error processing the request
